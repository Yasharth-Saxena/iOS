import UIKit

// ########################### INITIALIZERS

// 1) Parameterised initialization with class or struct

class SomeRandomClass {
    var someVariable: Int
    var someOtherVariable: String
    var anotherVariable: String
    
    init(){
        someVariable = 5
        someOtherVariable = "Hey good looking!!"
        anotherVariable = "This is just another variable"
    }
    
    init(withSomeOtherVar: String){
        someVariable = 7
        someOtherVariable = "Hey this is different"
        anotherVariable = withSomeOtherVar
    }
}

// 2) Rules for initializers in inheritance

/* Rule a)
A designated initializer must call a designated initializer from its immediate superclass.
Rule b)
A convenience initializer must call another initializer from the same class.
Rule c)
A convenience initializer must ultimately call a designated initializer.
*/

// 3) Write convinience initializers for MOVIE class

class Movie {
    var title: String
    var director: String
    var releaseYear: Int
    var genre: String
    
    // designated initializer for the class
    init(_ title: String, _ director: String, _ releaseYear: Int, _ genre: String) {
        self.title = title
        self.director = director
        self.releaseYear = releaseYear
        self.genre = genre
    }
    
    // convinience initializer
    convenience init(_ newReleaseYear: Int) {
        self.init("Interstellar", "Christopher Nolan", 2016, "Sci-Fi")
        self.releaseYear = newReleaseYear
    }
    
    // a method for printing details of the movie
    func details() -> String {
        return "\(self.title) is a \(self.genre) movie, directed by \(self.director) released in \(self.releaseYear)."
    }
}

var someRandomMovie = Movie(2018)
print(someRandomMovie.details())

//########################### ARRAY

// 1) Create an array containing five different integer values

// first method
var myArray = [1,2,3,4,5] // an array of integers
print(myArray)

// second method
var otherArray = [Int]()
otherArray.append(contentsOf: [1,2,3,4,5])
print(otherArray)

// third method
var someOtherArray = Array(1...5)
print(someOtherArray)

// fourth method
var yetAnotherArray = [Int](arrayLiteral: 1,2,3,4,5)
print(yetAnotherArray)

// 2) Create an immutable array with five city names

let cityNames = ["Lucknow", "Aviano", "Noida", "Ghaziabad", "Falzes"]

// 3) Insert city names like Canada and Switzerland

// first method
var otherCityNames = ["Warton", "Chirk", "Paignton", "Tong", "Bridport"]
otherCityNames.append(contentsOf: ["Canada", "Switzerland"])
print(otherCityNames)

// second method
var someOtherCityNames = ["Quinsac", "Marefosse", "Jayac", "Blandy", "Longuefuye"]
someOtherCityNames.insert(contentsOf: ["Canada, Switzerland"], at:4)
print(someOtherCityNames)

// 4) Create an array with values 14, 18, 15, 16, 23, 52, 95. Replace the values 24 & 48 at 2nd & 4th index of array
var newArray = [14, 18, 15, 16, 23, 52, 95]
newArray[1] = 24
newArray[3] = 48
print(newArray)

//########################### SETS

let houseAnimals: Set = ["Dog", "Cat"]
let farmAnimals: Set = ["Cow", "Rooster", "Sheep", "Dog", "Cat"]
let cityAnimals: Set = ["Bird", "Rat"]

// 1) Determine if houseAnimals are a subset of farmAnimals

print(houseAnimals.isSubset(of: farmAnimals))

// 2) Determine whether the set of farm animals is a superset of house animals.

print(farmAnimals.isSuperset(of: houseAnimals))

// 3) Determine if the set of farm animals is disjoint with city animals.

print(farmAnimals.isDisjoint(with: cityAnimals))

// 4) Create a set that only contains farm animals that are not also house animals.
print(farmAnimals.subtracting(houseAnimals))

// 5) Create a set that only contains farm animals that are not also house animals
let everythingArray = houseAnimals.union(farmAnimals).union(cityAnimals)
print(everythingArray)

//############################# DICTIONARIES

// 1) Create an empty dictionary with keys of type String and values of type Int and assign it to a variable in as many ways as you can think of (there's at least 4 ways).

var emptyDict: [String: Int] = [:]
var emptyDict1 = [String: Int]()
var emptyDict2 = Dictionary<String, Int>()
var emptyDict3: Dictionary<String,Int> = [String: Int]()

// 2) Create a mutable dictionary named secretIdentities where the key value pairs are "Hulk" -> "Bruce Banner", "Batman" -> "Bruce Wayne", and "Superman" -> "Clark Kent".

var secretIdentities = ["Hulk": "Bruce Banner", "Batman": "Bruce Wayne", "Superman": "Clark Kent"]

// 3) Create a nested structure of Key-value pair.

var someRandomDict = [1: "First string", 2: "Second String", 3: "Third string", 4: [["Hulk": "Bruce Banner", "Batman": "Bruce Wayne", "Superman": "Clark Kent"]]] as [Int : Any]

// 4) Print all the keys in the dic

for (hero, _) in secretIdentities {
    print("\(hero)")
}


