import UIKit

struct EmpPersonal {
    var empId: Int
    var name: String
    var country: String
    var address: String
    var hobbies: String?
}

struct EmpProfessional {
    var empId: Int
    var name: String
    var dept: String
    var branch: String
    var experience: Int
}

var empPers = [EmpPersonal(empId: 1, name: "John Doe", country: "America", address: "Some american address",                     hobbies: "travelling"),
               EmpPersonal(empId: 2, name: "Sunandha Verma", country: "India", address: "Some Indian address", hobbies: "dancing"),
               EmpPersonal(empId: 3, name: "Jane Doe", country: "Britain", address: "Some british address", hobbies: "some random hobby"),
               EmpPersonal(empId: 4, name: "Oh Dae Su", country: "Japan", address: "Some Japanese address", hobbies: "studying"),
               EmpPersonal(empId: 5, name: "Ching Wang Lu", country: "China", address: "Some Chinese address", hobbies: "playing chess")]

var empPro = [EmpProfessional(empId: 1, name: "John Doe", dept: "iOS", branch: "America", experience: 4),
              EmpProfessional(empId: 2, name: "Sunandha Verma", dept: "Android", branch: "India", experience: 5),
              EmpProfessional(empId: 3, name: "Jane Doe", dept: "JVM", branch: "Britain", experience: 3),
              EmpProfessional(empId: 4, name: "Oh Dae Su", dept: "FullStack", branch: "Japan", experience: 6),
              EmpProfessional(empId: 5, name: "Ching Wang Lu", dept: "Web", branch: "China", experience: 2)]

// Question 1) Third employee structure that contains info from both based on common id
struct EmpCombined{
    var empId: Int
    var name: String
    var country: String
    var address: String
    var hobbies: String?
    var dept: String
    var branch: String
    var experience: Int
}

var combinedArray = [EmpCombined]()

for i in 0...empPers.count - 1{
    for j in 0...empPro.count - 1{
        if empPers[i].empId == empPro[j].empId {
            combinedArray.append(EmpCombined(empId: empPers[i].empId, name: empPers[i].name, country: empPers[i].country, address: empPers[i].address, hobbies: empPers[i].hobbies, dept: empPro[j].dept, branch: empPro[j].branch, experience: empPro[j].experience))
        }
    }
}
print(combinedArray)


// Question 3) List of employees in a certain department

func particularDept (using arg1: [EmpProfessional] ,and arg2: String){
    for i in arg1{
        if i.dept == arg2{
            print(i.name)
        }
    }
}

particularDept(using: empPro, and: "iOS")

// Question 4) List of employees that live in the same country and work in the same branch

func commonCountryBranch(using arg1: [EmpCombined]){
    for i in arg1{
        if i.country == i.branch{
            print(i.name)
        }
    }
}

commonCountryBranch(using: combinedArray)

// Question 5) Have a hobby with their experience

func hobbyWithExp (using arg1: [EmpCombined]) {
    for i in arg1{
        if let unwrapHobby = i.hobbies{
            print("\(i.name) has an experience of \(i.experience) years and likes \(unwrapHobby).")
        }
    }
}

hobbyWithExp(using: combinedArray)

// Question 6) Print employee names starting with 'S'

func nameWithS (using arg: [EmpCombined]){
    for i in arg{
        if i.name.starts(with: "S"){
            print(i.name)
        }
    }
}

nameWithS(using: combinedArray)

